//krushkal algorithm 

approach is very simple it says that just take most minimum edge available in which do not connect the already connected edges :


we achieve this by normal implementation of dsu and 
and check if that do not have same parents then Union them and get the weight of that edge simply add all of them return the sum !!!


vector<int> parent;
vector<int> rank;

int find(int x){
    if(parent[x]==x)
    return x;
    
    return parent[x]=find(parent[x]);
}

void Union(int x,int y){
    int x_parent=find(x);
    int y_parent=find(y);
    
    if(x_parent==y_parent)return ;
    
    if(rank[x_parent]>rank[y_parent]){
        parent[y_parent]=x_parent;
    }
    else if(rank[x_parent]<rank[y_parent]){
        parent[x_parent]=y_parent;
    }
    else {
        parent[y_parent]=x_parent;
        rank[x_parent]++;
    }
    
}

int krushkal(vector<vector<int>>& adj){
    int sum=0;
    for(auto ele:adj){
        int u=ele[0];
        int v=ele[1];
        int w=ele[2];

        int parent_u=find(u);
        int parent_v=find(v);

        if(parent_u!=parent_v){
            sum+=w;
            Union(u,v);
        }
    }
    return sum;
    }
    int minCostConnectPoints(vector<vector<int>>& points) {
        int v=points.size();
        vector<vector<int>> adj;

        parent.resize(v);
        rank.resize(v);

        

        for(int i=0;i<v;i++){
            parent[i]=i;
            rank[i]=0;
        }

        for (int i = 0; i < v; i++) {
        for (int j = i + 1; j < v; j++) {
            int weight = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
            adj.push_back({i, j, weight});
        }
    }

        sort(adj.begin(), adj.end(), [](const vector<int>& a, const vector<int>& b) {
        return a[2] < b[2];
    });

        return krushkal(adj);


    }