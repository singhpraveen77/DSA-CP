// Prims algo give us the minimum cost required to travel throught all the nodes 

typedef pair<int,int> P;
    int minCostConnectPoints(vector<vector<int>>& points) {
        int v=points.size();
        vector<vector<pair<int,int>>> adj(v);
        vector<bool> visited(v,false);
        priority_queue<P,vector<P>,greater<P>> pq;

        for(int i=0;i<points.size();i++){
            int x=points[i][0];
            int y=points[i][1];
            for(int j=i+1;j<points.size();j++){
                int a=points[j][0];
                int b=points[j][1];
                int val=abs(x-a)+abs(y-b);
                adj[i].push_back({j,val});
                adj[j].push_back({i,val});
            }
        }


        
        pq.push({0,0});
        long sum=0;
        while(pq.empty()==false){
            int w=pq.top().first;
            int node=pq.top().second;
            pq.pop();

            if(visited[node]==true)
                continue;
            
            visited[node]=true;
            sum+=w;

            for(auto ele:adj[node]){
                
                pq.push({ele.second,ele.first});
                
            }
        }
        
        return sum;
    }

