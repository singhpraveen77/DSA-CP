

 void dfs(vector<vector<int>>& adj,vector<bool> & visited,stack<int> & st, int node){
      visited[node]=true;
      
      for(auto ele:adj[node]){
          if(visited[ele]==false){
              dfs(adj,visited,st,ele);
          }
      }
      
      st.push(node);
  }
    // Function to return list containing vertices in Topological order.
    vector<int> topologicalSort(vector<vector<int>>& adj) {
        // Your code here
        stack<int> st; 
        int v=adj.size();
        vector<bool> visited(v,false); 
        
        
        for(int i=0;i<v;i++){
            if(visited[i]==false){
                dfs(adj,visited,st,i);
            }
        }
        
        vector<int> ans;
        
        
        while(st.empty()==false){
            ans.push_back(st.top());
            st.pop();
        }
        
        return ans;
    }