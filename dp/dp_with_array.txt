//basic tempelate of dp and memoization and using the array and unordered_map for dp ...

question number : 2900
longest unequal adjacent groups :

unordered_map<string,vector<int>>dp;
vector<int> solve(vector<string>& words, vector<int>& groups,int i,int prev){
    if(i>=groups.size()){
        return {};
    }
    string key=to_string(prev)+"_"+to_string(i);

    if(dp.find(key)!=dp.end())return dp[key];
    vector<int>  nottaken=solve(words,groups,i+1,prev);

    vector<int> taken;

    if((prev==-1) or groups[i]!=groups[prev]){
        taken=solve(words,groups,i+1,i);
        taken.insert(taken.begin(),i);
    }

    if(taken.size()>nottaken.size()){
        return dp[key]=taken;
    }
    return dp[key]=nottaken;
}

 vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {

        vector <string> ans;
        

        vector<int> indices= solve(words,groups,0,-1);

        for(int i=0;i<indices.size();i++){
            ans.push_back(words[indices[i]]);
        }

        return ans;
  
    }