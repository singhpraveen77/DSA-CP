
// this is the algo to calculate the strongly connected components in the graph 
 basic logic:

 step one :
    simplily just find the topological sort 
step two:
    reverse  all the edges of the graph or  form a new adjreverse
step three:
    just check the number of times required to traverse to call dfs on the adj reverse in the topo sort order 


void dfsfill(vector<vector<int>> &adj,vector<bool> & visited,stack<int> & st,int node){
      visited[node]=true;
      
      for(auto ele:adj[node]){
          if(visited[ele]==false){
              dfsfill(adj,visited,st,ele);
          }
      }
      
      st.push(node);
  }
  
  
  void dfs(vector<vector<int>> &adj,vector<bool> & visited,int node){
      visited[node]=true;
      
      for(auto ele:adj[node]){
          if(visited[ele]==false){
              dfs(adj,visited,ele);
          }
      }
      
  }
  
  
    int kosaraju(vector<vector<int>> &adj) {
        // code here
        int n=adj.size();
        vector<bool> visited(n,false);
        stack <int> st;
        
        
        //topo sort        
        for(int i=0;i<n;i++){
            if(visited[i]==false){
                dfsfill(adj,visited,st,i);
            }
        }
        
        //reverse adj 
        
        vector<vector<int>> adjreverse(n);
        
        for(int i=0;i<n;i++){
            for(int j=0;j<adj[i].size();j++){
                adjreverse[adj[i][j]].push_back(i);
            }
        }

        //can also be written like this 

        //for(int i=0;i<n;i++){
        //    for(auto j:adj[i]){
        //        adjreverse[j].push_back(i);
        //    }
        //}
        
        //dfs on reversed adjlist in the topo sort order and cnt the number of dfs callss 
        
        int cnt=0;
        visited=vector<bool> (n,false);
        
        while(st.empty()==false){
            int top=st.top();
            st.pop();
            
            if(visited[top]==false){
                dfs(adjreverse,visited,top);
                cnt++;
            }
        }
        return cnt;
        
        
    }